import argparse as аргпарс
import builtins as встроенные
import pathlib as путьбиб
import sys as сис

from программа import Программа
from операции.питон import (
    ЗагрКонст, ЗагрИмя, СохрКакИмя, ДвоичнОп, Толкнуть, Вызвать
)
from типы import Нуль


def интерпретировать(программа: Программа):
    print(f"Пул констант: {программа.конст_пул}")
    стэк = []
    for операция in программа.операции:
        print(f"Операция:     {операция.__class__.__name__}{vars(операция)}")
        операция.исполнить(стэк, программа.таблица_имен, программа.конст_пул)
        print(f"Стэк:         {стэк}")
        print(f"Таблица имен: {программа.таблица_имен}")
        print()


def компилировать(программа: Программа):
    raise NotImplemented


def выйти_с_ошибкой(текст: str, код_выхода: int = -1):
    print(f"ОШИБКА: {текст}")
    сис.exit(код_выхода)


def парсить_аргументы() -> аргпарс.Namespace:
    парсер = аргпарс.ArgumentParser(prog="казино")
    парсер.add_argument("команда", choices=["комп", "интер"])
    парсер.add_argument("файл", type=str)
    return парсер.parse_args()


if __name__ == "__main__":
    аргументы = парсить_аргументы()
    файл = путьбиб.Path(аргументы.файл)

    прог = Программа(
        операции=[
            ЗагрКонст(0),
            СохрКакИмя(0),
            ЗагрКонст(1),
            СохрКакИмя(1),
            Толкнуть(Нуль()),
            ЗагрИмя(2),
            ЗагрИмя(0),
            ЗагрИмя(1),
            ДвоичнОп(0),
            Вызвать(1),
        ],
        таблица_имен={
            0: ("a", None),
            1: ("b", None),
            2: ("print", встроенные.print),
        },
        конст_пул=(34, 35),
    )

    if not файл.exists():
        выйти_с_ошибкой(f"Файл {файл} не найден")
    match аргументы.команда:
        case "комп": компилировать(прог)
        case "интер": интерпретировать(прог)
        case _: выйти_с_ошибкой(f"Неизвестная команда `{аргументы.команда}`")

