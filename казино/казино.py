import argparse as аргпарс
import builtins as встроенные
import marshal as маршал
import pathlib as путьбиб
import struct as структ
import sys as сис
import time as время
import types as питипы

from программа import Программа
from операции.питон import *
from константы import МАГИЧЕСКОЕ_ЧИСЛО_ПИТОНА


def интерпретировать(программа: Программа):
    print(f"Пул констант: {программа.конст_пул}")
    стэк = []
    for операция in программа.операции:
        print(f"Операция:     {операция.__class__.__name__}{vars(операция)}")
        операция.исполнить(стэк, программа.таблица_имен, программа.конст_пул)
        print(f"Стэк:         {стэк}")
        print(f"Таблица имен: {программа.таблица_имен}")
        print()


def компилировать(программа: Программа, вывод_файл: путьбиб.Path):
    байткод = b"".join(оп.компилировать() for оп in программа.операции)
    код_тип = питипы.CodeType(
        0,                      # argcount
        0,                      # posonlyargcount
        0,                      # kwonlyargcount
        0,                      # nlocals
        2,                      # stacksize
        64,                     # flags
        байткод,                # codestring
        программа.конст_пул,    # consts
        программа.кортеж_имен,  # names
        (),                     # varnames
        "test.py",              # filename
        "<module>",             # name
        "<module>",             # qualname
        1,                      # firstlineno
        b"",                    # linetable
        b"",                    # exceptiontable
        # optional
        (),                     # freevars
        (),                     # cellvars
    )
    времштамп = int(время.time())
    разм_файла = 0

    with вывод_файл.open("wb") as ф:
        ф.write(МАГИЧЕСКОЕ_ЧИСЛО_ПИТОНА)
        ф.write(структ.pack("I", времштамп))
        ф.write(структ.pack("I", разм_файла))
        ф.write(маршал.dumps(код_тип))


def выйти_с_ошибкой(текст: str, код_выхода: int = -1):
    print(f"ОШИБКА: {текст}")
    сис.exit(код_выхода)


def парсить_аргументы() -> аргпарс.Namespace:
    парсер = аргпарс.ArgumentParser(prog="казино")
    парсер.add_argument("команда", choices=["комп", "интер"])
    парсер.add_argument("файл", type=str)
    return парсер.parse_args()


if __name__ == "__main__":
    аргументы = парсить_аргументы()
    файл = путьбиб.Path(аргументы.файл)

    прог = Программа(
        операции=[
            Вернуть(0),
            ЗагрКонст(1),
            СохрКакИмя(0),
            ЗагрКонст(2),
            СохрКакИмя(1),
            ТолкнутьНуль(),
            ЗагрИмя(2),
            ЗагрИмя(0),
            ЗагрИмя(1),
            ДвоичнОп(0),
            Вызвать(1),
            ТянутьВерхушку(),
            ВернутьКонст(0),
        ],
        таблица_имен={
            0: ("a", None),
            1: ("b", None),
            2: ("print", встроенные.print),
        },
        конст_пул=(None, 34, 35),
    )

    if not файл.exists():
        выйти_с_ошибкой(f"Файл {файл} не найден")
    match аргументы.команда:
        case "комп": компилировать(прог, путьбиб.Path("./test.pyc"))
        case "интер": интерпретировать(прог)
        case _: выйти_с_ошибкой(f"Неизвестная команда `{аргументы.команда}`")

