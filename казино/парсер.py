import builtins as встроенные
import pathlib as путьбиб
import re as ре
from collections import defaultdict as умолчслов

from операции import питон
from программа import Программа
from типы import Ничего

перем_шаблон = r"^заряжаем\s+(\w+)\s*=\s*([\w\s\+\-\*/]+)"
функ_говорим_шаблон = r"^говорим\((.*?)\)"

_йоты = умолчслов(lambda: -1)


def _йота(имя: str, сброс: bool = False) -> int:
    global _йоты

    if сброс:
        _йоты[имя] = 0
    else:
        _йоты[имя] += 1
    return _йоты[имя]


class Парсер:

    def __init__(сам, файл: путьбиб.Path):
        сам.файл = файл

    def получить_программу(сам) -> Программа:
        содержание = сам.файл.read_text()
        токены = []

        строки = содержание.splitlines()
        for строка in строки:
            if соотв := ре.match(перем_шаблон, строка):
                токены.append({
                    "тип": "переменная",
                    "имя": соотв.group(1),
                    "значение": соотв.group(2),
                })
            elif соотв := ре.search(функ_говорим_шаблон, строка):  # FIXME
                токены.append({
                    "тип": "вызов_функции",
                    # "имя": "говорить",
                    "имя": "print",
                    "аргументы": [соотв.group(1)],
                })

        # FIXME
        print("Токены:")
        __import__('pprint').pprint(токены)
        print()

        операции = []
        имя_к_ид_знач = {}
        таблица_конст = {}

        операции.append(питон.Вернуть(0))
        таблица_конст[Ничего] = _йота("таблица_конст")

        for токен in токены:
            match токен["тип"]:
                case "переменная":
                    имя = токен["имя"]
                    значение = токен["значение"]
                    if значение.isdigit():
                        значение = int(значение)

                    if имя not in имя_к_ид_знач:
                        имя_к_ид_знач[имя] = (_йота("имя_к_ид_знач"), Ничего)
                    if значение not in таблица_конст:
                        таблица_конст[значение] = _йота("таблица_конст")

                    ид_имени = имя_к_ид_знач[имя][0]
                    ид_константы = таблица_конст[значение]
                    операции.extend([
                        питон.ЗагрКонст(ид_константы),
                        питон.СохрКакИмя(ид_имени),
                    ])
                case "вызов_функции":
                    имя = токен["имя"]
                    if имя not in имя_к_ид_знач:
                        имя_к_ид_знач[имя] = (_йота("имя_к_ид_знач"), встроенные.print)

                    аргументы = токен["аргументы"][0]

                    ид_функции = имя_к_ид_знач[имя][0]
                    ид_константы = имя_к_ид_знач[аргументы][0]
                    операции.extend([
                        питон.ТолкнутьНуль(),
                        питон.ЗагрИмя(ид_функции),
                        питон.ЗагрИмя(ид_константы),
                        питон.Вызвать(1),
                    ])

        операции.extend([
            питон.ТянутьВерхушку(),
            питон.ВернутьКонст(0),
        ])
                    
        таблица_имен = {
            ид: (имя, знач)
            for имя, (ид, знач) in имя_к_ид_знач.items()
        }
        конст_пул = tuple(знач for знач in sorted(таблица_конст, key=таблица_конст.get))
        return Программа(операции, таблица_имен, конст_пул)

