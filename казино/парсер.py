import pathlib as путьбиб
import re as ре
import sys as сис
from pprint import pprint as кпечать

import казино.исключения as искл
import казино.константы as конст
import казино.токен as тк
import казино.операции.питон as питон
from казино.операции.база import Оп
from казино.программа import Программа
from казино.структуры import ПромежутТаблицаИмен, ТаблицаКонст
from казино.типы import Список, Ничего, Мб
from казино.утилиты import Поток

КОММЕНТАРИЙ = "//"
ОБЪЯВЛЕНИЕ_ПЕРЕМЕННОЙ_РЕГВЫР = r"^заряжаем *([а-яА-Яa-zA-Z]+)( *=)?(.*)?"
ПРИСВОЕНИЕ_РЕГВЫР = r"([а-яА-Яa-zA-Z]+) = (.*)"
ВЫЗОВ_ФУНК_РЕГВЫР = r"(\w+)\((.*)\)"

type ИсклМб[Т] = Мб[Т | искл.Искл]


def _имя_переменной_валидно(имя: str) -> bool:
    return имя != "" and имя not in конст.КЛЮЧЕВЫЕ_СЛОВА


def _попробуй_получи_вызов(строка: str, ном_строки: int) -> Мб[тк.Вызов]:
    if соотв := ре.match(ВЫЗОВ_ФУНК_РЕГВЫР, строка):
        имя_функ, аргументы = соотв.groups()
        return тк.Вызов(
            функция=тк.Функция(имя_функ),
            аргументы=_парсить_аргументы(аргументы, ном_строки)
        )
    return Ничего

def _попробуй_получи_вещественное(строка: str) -> Мб[тк.ВещественноеЧисло]:
    if ре.match(r"^-?\d+\.\d+$", строка): 
        return тк.ВещественноеЧисло(float(строка))

def _попробуй_получи_целое(строка: str) -> Мб[тк.ЦелоеЧисло]:
    if строка.isdigit(): 
        return тк.ЦелоеЧисло(int(строка))

def _попробуй_получи_строку(строка: str) -> Мб[тк.Строка]:
    if строка.startswith('"') and строка.endswith('"'): 
        return тк.Строка(строка[1:-1])

def _попробуй_получи_булево(строка: str) -> Мб[тк.Булево]:
    if строка in {"да", "не"}: 
        return тк.Булево(строка == "да")

def _попробуй_получи_объявление(строка: str, ном_строки: int) -> ИсклМб[тк.ОбъявлениеПеременной]:
    if соотв := ре.match(ОБЪЯВЛЕНИЕ_ПЕРЕМЕННОЙ_РЕГВЫР, строка): 
        имя_перем = соотв.group(1)
        знач = Ничего
        if not _имя_переменной_валидно(имя_перем):
            return искл.НевалидноеИмя(имя_перем)
        if соотв.group(2):
            прав_часть = соотв.group(3)
            if not прав_часть:
                return искл.НеверноеВыражение(строка)
            знач = получить_токен(прав_часть, ном_строки)
        return тк.ОбъявлениеПеременной(имя_перем, знач)

def _попробуй_получи_присвоение(строка: str, ном_строки) -> Мб[тк.Присвоение]:
    if соотв := ре.match(ПРИСВОЕНИЕ_РЕГВЫР , строка):
        перем, прав_часть = соотв.groups()
        знач = получить_токен(прав_часть, ном_строки)
        return тк.Присвоение(перем, знач)
    return Ничего

def _попробуй_получи_переменную(строка: str) -> ИсклМб[тк.Переменная]:
    if not _имя_переменной_валидно(строка):
        return искл.НеверноеВыражение(строка)
    return тк.Переменная(строка)

def получить_токен(строка: str, ном_строки: int) -> тк.Токен | искл.Искл:
    строка = строка.strip()
    return (
        _попробуй_получи_вызов(строка, ном_строки)
        or _попробуй_получи_вещественное(строка)
        or _попробуй_получи_целое(строка)
        or _попробуй_получи_строку(строка)
        or _попробуй_получи_булево(строка)
        or _попробуй_получи_присвоение(строка, ном_строки)
        or _попробуй_получи_объявление(строка, ном_строки)
        or _попробуй_получи_переменную(строка)
        or искл.ОшибкаПреобразованияТокена(строка)
    )

def _парсить_аргументы(аргументы: str, ном_строки: int) -> Список[тк.Токен]:
    токены = []
    баланс = 0
    текущие_символы = []
    for симв in аргументы:
        if симв == "," and баланс == 0:
            токены.append(получить_токен("".join(текущие_символы), ном_строки))
            текущие_символы = []
        else:
            if симв == "(":   баланс += 1
            elif симв == ")": баланс -= 1
            текущие_символы.append(симв)
    if текущие_символы:
        токены.append(получить_токен(''.join(текущие_символы), ном_строки))
    return токены


def _убрать_комменты(стр: str) -> str:
    if стр.startswith("//"):
        стр = ""
    if (поз_коммент := стр.find(КОММЕНТАРИЙ)) != -1:
        стр = стр[:поз_коммент]
    return стр


def _подготовить_строки(файл: путьбиб.Path) -> Список[str]:
    содержание = файл.read_text()
    return (
        Поток(содержание.splitlines())
        .прим(str.strip)
        .прим(_убрать_комменты)
        .фильтр(bool)
        .собрать(list)
    )


def _преобразовать_в_токены(строки: Список[str]) -> tuple[bool, Список[тк.Токен] | Список[tuple[int, искл.Искл]]]:
    токены_и_искл = (
        Поток(enumerate(строки, 1))
        .прим(lambda номер_и_строка: 
            (номер_и_строка[0], получить_токен(номер_и_строка[1], номер_и_строка[0]))
        )
        .фильтр(lambda номер_и_об: bool(номер_и_об[1]))
        .собрать(list)
    )
    исключения = (
        Поток(токены_и_искл)
        .фильтр(lambda о: isinstance(о[1], искл.Искл))
        .собрать(list)
    )
    if исключения:
        return False, исключения
    токены = (
        Поток(токены_и_искл)
        .прим(lambda нумерованый_токен: нумерованый_токен[1])
        .собрать(list)
    )
    return (True, токены)


def _сгенерировать_промежуточный_контекст(
    токены: Список[тк.Токен]
) -> tuple[Список[Оп], ПромежутТаблицаИмен, ТаблицаКонст]:
    промежут_табл_им = ПромежутТаблицаИмен()
    таблица_конст = ТаблицаКонст()
    таблица_конст.найти_или_создать(Ничего)
    операции = []
    операции.append(питон.Вернуть(0))
    for ток in токены:
        операции.extend(ток.генерир_опы(промежут_табл_им, таблица_конст))
    операции.extend([
        питон.ТянутьВерхушку(),
        питон.ВернутьКонст(таблица_конст.найти_или_создать(Ничего)),
    ])
    return операции, промежут_табл_им, таблица_конст


def получить_программу(файл: путьбиб.Path, *, допвывод: bool) -> Программа:
    строки = _подготовить_строки(файл)
    успех, токены_или_искл = _преобразовать_в_токены(строки)
    if not успех:
        print("Обнаружены ошибки во время чтения программы:")
        for (ном_строки, ошибка) in токены_или_искл:
            print(f" - строка {ном_строки}: {ошибка}")
        сис.exit(-1)
    токены = токены_или_искл
    if допвывод:
        print("Токены:")
        кпечать(токены)
        print()
    операции, промежут_табл_им, таблица_конст = _сгенерировать_промежуточный_контекст(токены)
    if допвывод:
        print("Промежуточная таблица имен:")
        кпечать(промежут_табл_им)
        print()
        print("Таблица констант:")
        кпечать(таблица_конст)
        print()
        print("Операции:")
        кпечать(операции)
        print()
        print("-" * 40)
        print()
    таблица_имен = промежут_табл_им.как_стд_таблица_имен()
    конст_пул = таблица_конст.как_констпул()
    if допвывод:
        print("Таблица имен:")
        кпечать(таблица_имен)
        print()
        print("Конст пул")
        кпечать(конст_пул)
        print()
    return Программа(операции, таблица_имен, конст_пул)

