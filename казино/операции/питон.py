import operator as оператор

from казино.интер import Интерпретатор
from казино.операции.база import Оп
from казино.константы import ПИТОН_ОПКОДЫ, КОДЫ_ДВОИЧН_ОП
from казино.типы import Нуль


class Вернуть(Оп):
    """
    RESUME x
    """
    __аргументы__ = ("знач",)

    def __init__(сам, знач: int):
        сам.знач = знач

    def исполнить(сам, интер: Интерпретатор):
        # TODO
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["RESUME"], сам.знач])


class ТолкнутьНуль(Оп):
    """
    PUSH_NULL
    """

    def исполнить(сам, интер: Интерпретатор):
        интер.стэк.append(Нуль())
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["PUSH_NULL"], 0])


class ЗагрКонст(Оп):
    """
    LOAD_CONST x
    """
    __аргументы__ = ("инд",)

    def __init__(сам, инд: int):
        сам.инд = инд

    def исполнить(сам, интер: Интерпретатор):
        знач = интер.конст_пул[сам.инд]
        интер.стэк.append(знач)
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["LOAD_CONST"], сам.инд])


class ЗагрИмя(Оп):
    """
    LOAD_NAME x
    """
    __аргументы__ = ("инд",)

    def __init__(сам, инд: int):
        сам.инд = инд

    def исполнить(сам, интер: Интерпретатор):
        знач = интер.таблица_имен[сам.инд][1]
        интер.стэк.append(знач)
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["LOAD_NAME"], сам.инд])


class СохрКакИмя(Оп):
    """
    STORE_NAME x
    """
    __аргументы__ = ("инд",)

    def __init__(сам, инд: int):
        сам.инд = инд

    def исполнить(сам, интер: Интерпретатор):
        знач = интер.стэк.pop()
        имя = интер.таблица_имен[сам.инд][0]
        интер.таблица_имен[сам.инд] = (имя, знач)
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["STORE_NAME"], сам.инд])


class ДвоичнОп(Оп):
    """
    BINARY_OP x
    """
    __аргументы__ = ("код",)

    _КОД_К_ОПЕРАЦИИ = {
        КОДЫ_ДВОИЧН_ОП["СЛОЖЕНИЕ"]: оператор.add,
        КОДЫ_ДВОИЧН_ОП["И"]: оператор.and_,
        КОДЫ_ДВОИЧН_ОП["ЦЕЛОЕ_ДЕЛЕНИЕ"]: оператор.floordiv,
        КОДЫ_ДВОИЧН_ОП["ЛСДВИГ"]: оператор.lshift,
        КОДЫ_ДВОИЧН_ОП["МАТРИЧН_УМНОЖЕНИЕ"]: оператор.matmul,
        КОДЫ_ДВОИЧН_ОП["УМНОЖЕНИЕ"]: оператор.mul,
        КОДЫ_ДВОИЧН_ОП["ИЛИ"]: оператор.mod,
        КОДЫ_ДВОИЧН_ОП["ВЗЯТИЕ_ОСТАТКА"]: оператор.or_,
        КОДЫ_ДВОИЧН_ОП["СТЕПЕНЬ"]: оператор.pow,
        КОДЫ_ДВОИЧН_ОП["ПСДВИГ"]: оператор.rshift,
        КОДЫ_ДВОИЧН_ОП["ВЫЧИТАНИЕ"]: оператор.sub,
    }

    def __init__(сам, код: int):
        сам.код = код

    def исполнить(сам, интер: Интерпретатор):
        правый = интер.стэк.pop()
        левый = интер.стэк.pop()
        оп = ДвоичнОп._КОД_К_ОПЕРАЦИИ[сам.код]
        рез = оп(левый, правый)
        интер.стэк.append(рез)
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["BINARY_OP"], сам.код, 0, 0])


class Вызвать(Оп):
    """
    CALL x
    """
    __аргументы__ = ("аргументов",)

    def __init__(сам, аргументов: int):
        сам.аргументов = аргументов

    def исполнить(сам, интер: Интерпретатор):
        аргументы = [интер.стэк.pop() for _ in range(сам.аргументов)]
        вызываемое = интер.стэк.pop()
        объект = интер.стэк.pop()
        if объект is Нуль():
            результат = вызываемое(*аргументы)
        else:
            результат = вызываемое(объект, *аргументы)
        интер.стэк.append(результат)
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["CALL"], сам.аргументов, 0, 0, 0, 0, 0, 0])


class ТянутьВерхушку(Оп):
    """
    POP_TOP
    """

    def исполнить(сам, интер: Интерпретатор):
        интер.стэк.pop()
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["POP_TOP"], 0])


class ВернутьКонст(Оп):
    """
    RETURN_CONST x
    """
    __аргументы__ = ("инд",)

    def __init__(сам, инд: int):
        сам.инд = инд

    def исполнить(сам, интер: Интерпретатор):
        # TODO
        сам.сдвинуть_текущий_индекс_оп(интер)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["RETURN_CONST"], сам.инд])

class ПрыгЕслиНе(Оп):
    """
    POP_JUMP_IF_FALSE x
    """
    __аргументы__ = ("дельта",)

    def __init__(сам, дельта: int):
        сам.дельта = дельта

    def исполнить(сам, интер: Интерпретатор):
        сам.сдвинуть_текущий_индекс_оп(интер, сдвиг=сам.дельта)

    def компилировать(сам) -> bytes:
        return bytes([ПИТОН_ОПКОДЫ["POP_JUMP_IF_FALSE"], сам.дельта])

